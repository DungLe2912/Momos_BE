version: "3.8"

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "5"

services:
  app:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: ${APP_NAME}
    restart: ${DOCKER_RESTART_POLICY}
    ports:
      - "${PORT}:${PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ACCESS_SECRET_KEY=${ACCESS_SECRET_KEY}
      - REFRESH_SECRET_KEY=${REFRESH_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRY=${ACCESS_TOKEN_EXPIRY}
      - REFRESH_TOKEN_EXPIRY=${REFRESH_TOKEN_EXPIRY}
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
    volumes:
      - ${LOG_VOLUME_PATH}:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scraper-network
    deploy:
      resources:
        limits:
          memory: ${DOCKER_MEMORY_LIMIT}
          cpus: ${DOCKER_CPU_LIMIT}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:${PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging

  postgres:
    image: postgres:15-alpine
    platform: linux/amd64
    container_name: ${APP_NAME}-postgres
    restart: ${DOCKER_RESTART_POLICY}
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - scraper-network
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: "0.5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging

  redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: ${APP_NAME}-redis
    restart: ${DOCKER_RESTART_POLICY}
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ${REDIS_VOLUME_PATH}:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - scraper-network
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: "0.3"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging

networks:
  scraper-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
